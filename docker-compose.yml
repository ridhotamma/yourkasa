version: '3.8'
services:
  api-gateway:
    image: nginx:latest
    container_name: yourkasa_api_gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - user-service
      - product-service
      - auth-service
    networks:
      - yourkasa_network

  user_db:
    image: postgres:latest
    container_name: yourkasa_user_db
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - yourkasa_network

  product_db:
    image: postgres:latest
    container_name: yourkasa_product_db
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: yourkasa_product
    ports:
      - "5434:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
    networks:
      - yourkasa_network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: yourkasa_user_service
    env_file: .env
    environment:
      - DB_HOST=user_db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    expose:
      - "8080"
    depends_on:
      - user_db
    networks:
      - yourkasa_network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: yourkasa_product_service
    env_file: .env
    environment:
      - DB_HOST=product_db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=yourkasa_product
      - DB_PORT=5432
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    expose:
      - "8080"
    depends_on:
      - product_db
    networks:
      - yourkasa_network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: yourkasa_auth_service
    env_file: .env
    environment:
      - DB_HOST=user_db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    expose:
      - "8081"
    depends_on:
      - user_db
    networks:
      - yourkasa_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - yourkasa_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - yourkasa_network

volumes:
  user_db_data:
    name: yourkasa_user_db_data
  product_db_data:
    name: yourkasa_product_db_data
  prometheus_data:
  grafana_data:

networks:
  yourkasa_network:
    name: yourkasa_network
    driver: bridge
